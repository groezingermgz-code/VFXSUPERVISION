name: Deploy Frontend to Cloudflare Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build
        env:
          VITE_API_URL: ${{ vars.VITE_API_URL }}

      - name: Verify build output and env
        run: |
          echo "VITE_API_URL=$VITE_API_URL"
          echo "Listing project root:"
          ls -la
          echo "Listing dist:"
          if [ ! -d "dist" ]; then
            echo "dist directory missing after build";
            exit 1;
          fi
          ls -la dist | head -n 200
        env:
          VITE_API_URL: ${{ vars.VITE_API_URL }}

      - name: Preflight Cloudflare config
        run: |
          echo "::group::Cloudflare Config"
          echo "PROJECT_NAME=$PROJECT_NAME"
          if [ "$HAS_CF_TOKEN" != "true" ]; then echo "CLOUDFLARE_API_TOKEN missing"; exit 1; fi
          if [ "$HAS_ACCOUNT_ID" != "true" ]; then echo "CLOUDFLARE_ACCOUNT_ID missing"; exit 1; fi
          echo "::endgroup::"
        env:
          PROJECT_NAME: ${{ vars.CLOUDFLARE_PROJECT_NAME || 'vfx-supervision' }}
          HAS_CF_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN != '' }}
          HAS_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID != '' }}

      - name: Cloudflare API auth smoke test
        run: |
          set -euo pipefail

          RAW_TOKEN="$CF_TOKEN"
          # Trim CR/LF and surrounding whitespace
          TRIMMED=$(printf "%s" "$RAW_TOKEN" | tr -d '\r\n' | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')
          # Detect formatting issues for diagnostics (do not print token)
          HAS_BEARER_PREFIX=no
          echo "$TRIMMED" | grep -Eiq '^[[:space:]]*[Bb]earer[[:space:]]+' && HAS_BEARER_PREFIX=yes
          # Safe detection of surrounding quotes/backticks without fragile regex quoting
          HAS_QUOTES_OR_BACKTICKS=no
          SQ=$(printf "\\047")
          BQ=$(printf "\\140")
          DQ=$(printf '"')
          first_char="${TRIMMED:0:1}"
          last_char="${TRIMMED: -1}"
          if [ "$first_char" = "$last_char" ] && { [ "$first_char" = "$SQ" ] || [ "$first_char" = "$DQ" ] || [ "$first_char" = "$BQ" ]; }; then
            HAS_QUOTES_OR_BACKTICKS=yes
          fi

          # Sanitize: remove optional Bearer prefix and surrounding quotes/backticks
          SANITIZED=$(printf "%s" "$TRIMMED" \
            | sed -E 's/^[[:space:]]*[Bb]earer[[:space:]]+//' \
            | sed -E 's/^"(.*)"$/\\1/; s/^\047(.*)\047$/\\1/; s/^`(.*)`$/\\1/')

          if [ -z "$SANITIZED" ]; then
            echo "CLOUDFLARE_API_TOKEN empty after sanitization. Secret may be unset or only formatting characters.";
            exit 1;
          fi

          echo "::notice::Secret had Bearer prefix: $HAS_BEARER_PREFIX; quotes/backticks: $HAS_QUOTES_OR_BACKTICKS"
          echo "::notice::Token length after sanitize: ${#SANITIZED}"

          echo "::group::Verify API token"
          VERIFY=$(curl -sS --retry 2 --retry-delay 1 \
            -H "Authorization: Bearer $SANITIZED" \
            https://api.cloudflare.com/client/v4/user/tokens/verify)
          echo "$VERIFY"
          if echo "$VERIFY" | grep -q '"success":true'; then
            echo "::endgroup::"
          else
            if echo "$VERIFY" | grep -q '"code":6111'; then
              echo "Authorization header format invalid. Ensure the secret is only the API Token (no quotes/backticks, no 'Bearer ' prefix).";
              echo "Also ensure this is an API Token, not the Global API Key.";
            fi
            exit 1;
          fi

          echo "::group::Check Pages access"
          PAGES=$(curl -sS --retry 2 --retry-delay 1 \
            -H "Authorization: Bearer $SANITIZED" \
            "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/pages/projects?per_page=1")
          echo "$PAGES"
          echo "$PAGES" | grep -q '"success":true' || { echo "Pages API not accessible for this token/account. Ensure permission 'Cloudflare Pages: Edit' and correct Account ID."; exit 1; }
          echo "::endgroup::"
        env:
          CF_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Node/npm info
        run: |
          node -v
          npm -v
          npx --version

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ vars.CLOUDFLARE_PROJECT_NAME || 'vfx-supervision' }}
          directory: ./dist
          branch: main
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}