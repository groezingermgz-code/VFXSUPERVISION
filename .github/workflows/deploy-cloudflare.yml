name: Deploy Frontend to Cloudflare Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          VITE_API_URL: ${{ vars.VITE_API_URL }}

      - name: Preflight Cloudflare config
        run: |
          echo "::group::Cloudflare Config"
          echo "PROJECT_NAME=$PROJECT_NAME"
          if [ "$HAS_CF_TOKEN" != "true" ]; then echo "CLOUDFLARE_API_TOKEN missing"; exit 1; fi
          if [ "$HAS_ACCOUNT_ID" != "true" ]; then echo "CLOUDFLARE_ACCOUNT_ID missing"; exit 1; fi
          echo "::endgroup::"
        env:
          PROJECT_NAME: ${{ vars.CLOUDFLARE_PROJECT_NAME || 'vfx-supervision' }}
          HAS_CF_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN != '' }}
          HAS_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID != '' }}

      - name: Node/npm info
        run: |
          node -v
          npm -v
          npx --version

      - name: Wrangler version
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '3.77.0'
          command: --version

      - name: Cloudflare whoami (direct npx, verbose)
        run: npx --yes wrangler -v whoami
        continue-on-error: true
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Cloudflare auth check (wrangler whoami)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '3.77.0'
          command: whoami

      - name: List Pages projects (direct npx, verbose)
        run: npx --yes wrangler -v pages project list
        continue-on-error: true
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: List Pages projects
        uses: cloudflare/wrangler-action@v3
        continue-on-error: true
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '3.77.0'
          command: pages project list

      - name: Ensure Pages project exists
        uses: cloudflare/wrangler-action@v3
        continue-on-error: true
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '3.77.0'
          command: pages project create ${{ vars.CLOUDFLARE_PROJECT_NAME || 'vfx-supervision' }} --production-branch=main

      - name: Deploy to Cloudflare Pages (direct npx, verbose)
        run: npx --yes wrangler -v pages deploy ./dist --project-name=${{ vars.CLOUDFLARE_PROJECT_NAME || 'vfx-supervision' }} --branch=main
        continue-on-error: true
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy to Cloudflare Pages (Wrangler)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '3.77.0'
          command: pages deploy ./dist --project-name=${{ vars.CLOUDFLARE_PROJECT_NAME || 'vfx-supervision' }} --branch=main
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}