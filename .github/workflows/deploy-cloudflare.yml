name: Deploy Frontend to Cloudflare Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build
        env:
          VITE_API_URL: ${{ vars.VITE_API_URL }}

      - name: Verify build output and env
        run: |
          echo "VITE_API_URL=$VITE_API_URL"
          echo "Listing project root:"
          ls -la
          echo "Listing dist:"
          if [ ! -d "dist" ]; then
            echo "dist directory missing after build";
            exit 1;
          fi
          ls -la dist | head -n 200
        env:
          VITE_API_URL: ${{ vars.VITE_API_URL }}

      - name: Preflight API health check
        run: |
          set -euo pipefail
          if [ -z "${VITE_API_URL:-}" ]; then
            echo "VITE_API_URL is empty. Set repository variable VITE_API_URL to your backend base (preferably ending with /api).";
            exit 1;
          fi

          BASE=$(printf "%s" "$VITE_API_URL" | sed 's#/*$##')
          # Determine health URL whether BASE includes /api or not
          if echo "$BASE" | grep -Eq '/api$'; then
            HEALTH_URL="$BASE/health"
          else
            HEALTH_URL="$BASE/api/health"
          fi

          echo "Resolved BASE=$BASE"
          echo "Resolved HEALTH_URL=$HEALTH_URL"
          echo "HEALTHCHECK_SOFT_FAIL=${HEALTHCHECK_SOFT_FAIL:-false}"

          echo "::group::Backend warm-up"
          # Initial warm-up to nudge Render free instances
          curl -sS -o /dev/null --max-time 10 "$BASE" || true
          echo "Warm-up hit: $BASE"
          echo "::endgroup::"

          echo "::group::Ping $HEALTH_URL (up to 12 attempts)"
          STATUS="000"
          for i in $(seq 1 12); do
            STATUS=$(curl -sS -o /dev/null -w "%{http_code}" --connect-timeout 5 --max-time 20 "$HEALTH_URL" || echo "000")
            echo "Attempt $i: HTTP $STATUS"
            if [ "$STATUS" = "200" ]; then break; fi
            # Render free plan may need more time to spin up; wait progressively
            sleep 7
          done
          if [ "$STATUS" != "200" ]; then
            echo "Health check failed (status=$STATUS). Inspecting response headers/body preview:"
            echo "----- curl -I $HEALTH_URL -----"
            curl -sS -I "$HEALTH_URL" || true
            echo "----- curl body preview -----"
            curl -sS "$HEALTH_URL" | head -n 50 || true
            echo "Hint: Ensure VITE_API_URL points to your Render service base (e.g., https://vfx-supervision-api.onrender.com/api), and the service is reachable."
            if [ "${HEALTHCHECK_SOFT_FAIL:-false}" = "true" ]; then
              echo "::warning::Soft-Fail active: continuing despite failing backend health check (status=$STATUS).";
            else
              exit 1
            fi
          fi
          echo "::endgroup::"
        env:
          VITE_API_URL: ${{ vars.VITE_API_URL }}
          HEALTHCHECK_SOFT_FAIL: ${{ vars.HEALTHCHECK_SOFT_FAIL }}

      - name: Preflight Cloudflare config
        run: |
          echo "::group::Cloudflare Config"
          echo "PROJECT_NAME=$PROJECT_NAME"
          if [ "$HAS_CF_TOKEN" != "true" ]; then echo "CLOUDFLARE_API_TOKEN missing"; exit 1; fi
          if [ "$HAS_ACCOUNT_ID" != "true" ]; then echo "CLOUDFLARE_ACCOUNT_ID missing"; exit 1; fi
          echo "::endgroup::"
        env:
          PROJECT_NAME: ${{ vars.CLOUDFLARE_PROJECT_NAME || 'vfx-supervision' }}
          HAS_CF_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN != '' }}
          HAS_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID != '' }}

      - name: Cloudflare API auth smoke test
        run: |
          set -euo pipefail

          RAW_TOKEN="$CF_TOKEN"
          # Trim CR/LF and surrounding whitespace
          TRIMMED=$(printf "%s" "$RAW_TOKEN" | tr -d '\r\n' | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')
          # Detect formatting issues for diagnostics (do not print token)
          HAS_BEARER_PREFIX=no
          echo "$TRIMMED" | grep -Eiq '^[[:space:]]*[Bb]earer[[:space:]]+' && HAS_BEARER_PREFIX=yes
          # Safe detection of surrounding quotes/backticks without fragile regex quoting
          HAS_QUOTES_OR_BACKTICKS=no
          SQ=$(printf "\\047")
          BQ=$(printf "\\140")
          DQ=$(printf '"')
          first_char="${TRIMMED:0:1}"
          last_char="${TRIMMED: -1}"
          if [ "$first_char" = "$last_char" ] && { [ "$first_char" = "$SQ" ] || [ "$first_char" = "$DQ" ] || [ "$first_char" = "$BQ" ]; }; then
            HAS_QUOTES_OR_BACKTICKS=yes
          fi

          # Sanitize: remove optional Bearer prefix and surrounding quotes/backticks
          SANITIZED=$(printf "%s" "$TRIMMED" \
            | sed -E 's/^[[:space:]]*[Bb]earer[[:space:]]+//' \
            | sed -E 's/^"(.*)"$/\\1/; s/^\047(.*)\047$/\\1/; s/^`(.*)`$/\\1/')

          if [ -z "$SANITIZED" ]; then
            echo "CLOUDFLARE_API_TOKEN empty after sanitization. Secret may be unset or only formatting characters.";
            exit 1;
          fi

          echo "::notice::Secret had Bearer prefix: $HAS_BEARER_PREFIX; quotes/backticks: $HAS_QUOTES_OR_BACKTICKS"
          echo "::notice::Token length after sanitize: ${#SANITIZED}"

          echo "::group::Verify API token"
          VERIFY=$(curl -sS --retry 2 --retry-delay 1 \
            -H "Authorization: Bearer $SANITIZED" \
            https://api.cloudflare.com/client/v4/user/tokens/verify)
          echo "$VERIFY"
          if echo "$VERIFY" | grep -q '"success":[[:space:]]*true'; then
            echo "::endgroup::"
          else
            if echo "$VERIFY" | grep -q '"code":6111'; then
              echo "Authorization header format invalid. Ensure the secret is only the API Token (no quotes/backticks, no 'Bearer ' prefix).";
              echo "Also ensure this is an API Token, not the Global API Key.";
            fi
            exit 1;
          fi

          echo "::group::Check Pages access"
          PAGES_STATUS=$(curl -sS -o pages.json --retry 2 --retry-delay 1 \
            -H "Authorization: Bearer $SANITIZED" \
            "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/pages/projects?per_page=1" -w "%{http_code}")
          echo "HTTP $PAGES_STATUS"
          cat pages.json
          if [ "$PAGES_STATUS" = "200" ]; then
            if grep -q '"success":[[:space:]]*true' pages.json; then
              echo "::endgroup::"
            else
              echo "Pages API responded but success=false; check Account ID and token scopes."; exit 1;
            fi
          elif [ "$PAGES_STATUS" = "403" ]; then
            echo "403 Forbidden: Token lacks Pages access for this account or Account ID mismatch."; exit 1;
          elif [ "$PAGES_STATUS" = "404" ]; then
            echo "404 Not Found: Account ID likely invalid or Pages not enabled for this account."; exit 1;
          else
            echo "Unexpected status $PAGES_STATUS from Pages API."; exit 1;
          fi

          echo "::group::Check project visibility"
          PROJ_STATUS=$(curl -sS -o project.json --retry 2 --retry-delay 1 \
            -H "Authorization: Bearer $SANITIZED" \
            "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/pages/projects/$PROJECT_NAME" -w "%{http_code}")
          echo "HTTP $PROJ_STATUS"
          cat project.json
          if [ "$PROJ_STATUS" = "200" ]; then
            echo "::endgroup::"
          else
            echo "Cannot access project '$PROJECT_NAME' (status $PROJ_STATUS). Verify project exists under this account and name."; exit 1;
          fi
        env:
          CF_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PROJECT_NAME: ${{ vars.CLOUDFLARE_PROJECT_NAME || 'vfx-supervision' }}

      - name: Node/npm info
        run: |
          node -v
          npm -v
          npx --version

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ vars.CLOUDFLARE_PROJECT_NAME || 'vfx-supervision' }}
          directory: ./dist
          branch: main
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}